// <auto-generated />
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(TheAgesDBContext))]
    partial class TheAgesDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Building.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("buildings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Height = 2,
                            Name = "StoneAgeHouse",
                            Width = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.City.CityBuilding", b =>
                {
                    b.Property<int>("UserCityMapId")
                        .HasColumnType("integer");

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("XCoordinate")
                        .HasColumnType("integer");

                    b.Property<int>("YCoordinate")
                        .HasColumnType("integer");

                    b.HasKey("UserCityMapId", "BuildingId", "Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("city_building", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.City.CityExtension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.Property<int>("XCoordinate")
                        .HasColumnType("integer");

                    b.Property<int>("YCoordinate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("city_extension", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Height = 15,
                            Width = 15,
                            XCoordinate = -15,
                            YCoordinate = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.City.UserCityExtension", b =>
                {
                    b.Property<int>("CityMapId")
                        .HasColumnType("integer");

                    b.Property<int>("CityExtensionId")
                        .HasColumnType("integer");

                    b.HasKey("CityMapId", "CityExtensionId");

                    b.HasIndex("CityExtensionId");

                    b.ToTable("user_city_extension", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.City.UserCityMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("user_city_maps", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.City.CityBuilding", b =>
                {
                    b.HasOne("Domain.Entities.Building.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.City.UserCityMap", "UserCityMap")
                        .WithMany("Buildings")
                        .HasForeignKey("UserCityMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("UserCityMap");
                });

            modelBuilder.Entity("Domain.Entities.City.UserCityExtension", b =>
                {
                    b.HasOne("Domain.Entities.City.CityExtension", "CityExtension")
                        .WithMany()
                        .HasForeignKey("CityExtensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.City.UserCityMap", "UserCityMap")
                        .WithMany("Extensions")
                        .HasForeignKey("CityMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityExtension");

                    b.Navigation("UserCityMap");
                });

            modelBuilder.Entity("Domain.Entities.City.UserCityMap", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Extensions");
                });
#pragma warning restore 612, 618
        }
    }
}
